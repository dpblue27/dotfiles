# http://qiita.com/delphinus/items/00ff2c0ba972c6e41542
# http://qiita.com/kawaz/items/ee725f6214f91337b42b
# http://qiita.com/delphinus/items/cd221a450fd23506e81a

[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
  nmap <space> [denite]
  nnoremap [denite] <nop>

  " Change default options
  " call denite#custom#option('default', 'auto_preview', v:true)
  call denite#custom#option('default', 'highlight_matched_char', 'Type')
  call denite#custom#option('default', 'highlight_preview_line', 'Type')
  call denite#custom#option('default', 'highlight_mode_insert', 'None')

  " Use the sublime sorter by default.
  call denite#custom#source('_', 'sorters', ['sorter_sublime'])
  call denite#custom#source('_', 'converters', ['converter_relative_word'])

  " Use ag for file_rec
	call denite#custom#var('file_rec', 'command',
	                     \ ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])

  " Restrict to current project for file_mru
  call denite#custom#source('file_mru', 'matchers',
                          \ ['matcher_project_files', 'matcher_fuzzy'])
  call denite#custom#source('line', 'matchers', ['matcher_fuzzy'])

	" Ag command on grep source
	call denite#custom#var('grep', 'command', ['ag'])
	call denite#custom#var('grep', 'default_opts', ['-i', '-t']) " ignore case, all text files
	call denite#custom#var('grep', 'recursive_opts', [])
	call denite#custom#var('grep', 'pattern_opt', [])
	call denite#custom#var('grep', 'separator', ['--'])
	call denite#custom#var('grep', 'final_opts', [])

  nnoremap <silent> [denite]<space> :<C-u>Denite file_mru<cr><c-u>
  nnoremap <silent> [denite]/ :<C-u>Denite grep<cr>
  nnoremap <silent> [denite]b :<C-u>Denite buffer<cr>
  nnoremap <silent> [denite]c :<C-u>Denite change<cr>
  nnoremap <silent> [denite]C :<C-u>Denite command_history<cr>
  nnoremap <silent> [denite]f :<C-u>Denite file_rec<cr><c-u>
  nnoremap <silent> [denite]h :<C-u>Denite help<cr><c-u>
  nnoremap <silent> [denite]j :<C-u>Denite jump<cr>
  nnoremap <silent> [denite]l :<C-u>Denite line<cr>
  nnoremap <silent> [denite]o :<C-u>Denite outline<cr>
  nnoremap <silent> [denite]r :<C-u>Denite register<cr>
  nnoremap <silent> [denite]t :<C-u>Denite -buffer-name=gtags_completion gtags_completion<cr>
  nnoremap <silent> [denite]y :<C-u>Denite neoyank -default-action=append<cr>
'''

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/neoyank.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
  if dein#util#_is_windows()
    let cmd = 'tools\\update-dll-mingw'
  elseif dein#util#_is_cygwin()
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'ozelentok/denite-gtags'
hook_add = '''
  nnoremap <C-g>a :DeniteCursorWord -buffer-name=gtags_context gtags_context<cr>
  nnoremap <C-g>d :DeniteCursorWord -buffer-name=gtags_def gtags_def<cr>
  nnoremap <C-g>r :DeniteCursorWord -buffer-name=gtags_ref gtags_ref<cr>
  nnoremap <C-g>g :DeniteCursorWord -buffer-name=gtags_grep gtags_grep<cr>
  nnoremap <C-g>t :Denite -buffer-name=gtags_completion gtags_completion<cr>
  nnoremap <C-g>f :Denite -buffer-name=gtags_file gtags_file<cr>
  nnoremap <C-g>p :Denite -buffer-name=gtags_path gtags_path<cr>
'''

[[plugins]]
repo = 'airblade/vim-rooter'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
  let g:deoplete#enable_at_startup = 1
  " Tab to cycle thru matches
  inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"
  inoremap <expr><s-tab> pumvisible() ? "\<c-p>" : "\<s-tab>"

  let g:EclimCompletionMethod = 'omnifunc'
  let g:deoplete#omni#input_patterns = {}
  let g:deoplete#omni#input_patterns.java = '[^. *\t]\.\w*'
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  let g:lightline = {
      \ 'colorscheme': 'PaperColor',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'fugitive', 'filename' ] ]
      \ },
      \ 'component_function': {
      \   'fugitive': 'LightlineFugitive',
      \   'readonly': 'LightlineReadonly',
      \   'modified': 'LightlineModified',
      \   'filename': 'LightlineFilename'
      \ },
      \ 'separator': { 'left': '', 'right': '' },
      \ 'subseparator': { 'left': '', 'right': '' }
    \ }
  function! LightlineModified()
    if &filetype == "help"
      return ""
    elseif &modified
      return "+"
    elseif &modifiable
      return ""
    else
      return ""
    endif
  endfunction

  function! LightlineReadonly()
    if &filetype == "help"
      return ""
    elseif &readonly
      return ""
    else
      return ""
    endif
  endfunction

  function! LightlineFilename()
    return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
          \ ('' != expand('%:t') ? expand('%:t') : '[No Name]') .
          \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
  endfunction

  function! LightlineFugitive()
    if exists("*fugitive#head")
      let branch = fugitive#head()
      return branch !=# '' ? ' '.branch : ''
    endif
    return ''
  endfunction
'''

[[plugins]]
repo = 'edkolev/tmuxline.vim'

[[plugins]]
repo = 'vim-scripts/a.vim')
hook_add = '''
  let g:alternateSearchPath = 'reg:/include/src/g/,reg:/src/include/g/'
  let g:alternateNoDefaultAlternate = 1
'''

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'tpope/vim-obsession'

[[plugins]]
repo = 'vim-scripts/taglist.vim'
hook_add = '''
  " Toggle Tag list plugin
  map <leader>tl :TlistToggle<cr>

  let Tlist_Auto_Open = 0
  let Tlist_Exit_OnlyWindow = 1
  "let Tlist_Show_One_File = 1
  "let Tlist_Display_Prototype = 1
  let Tlist_File_Fold_Auto_Close = 1
  let Tlist_WinWidth = 40
'''

[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = '''
  let g:tagbar_left = 1

  " Toggle Tag list plugin
  map <leader>tb :TagbarToggle<cr>
'''

[[plugins]]
repo = 'vim-scripts/vcscommand.vim'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'honza/vim-snippets'

[[plugins]]
repo = 'SirVer/ultisnips'
hook_add = '''
  " Trigger configuration. Do not use <tab> if you use
  " https://github.com/Valloric/YouCompleteMe.
  let g:UltiSnipsExpandTrigger = "<leader><tab>"
  let g:UltiSnipsJumpForwardTrigger = "<leader><tab>"
  let g:UltiSnipsJumpBackwardTrigger = "<leader><s-tab>"
  let g:UltiSnipsListSnippets = "<leader>sn"
  let g:UltiSnipsSnippetDirectories = ["snips-private", "UltiSnips"]

  " " If you want :UltiSnipsEdit to split your window.
  let g:UltiSnipsEditSplit = "vertical"
'''

[[plugins]]
repo = 'joereynolds/gtags-scope'
hook_add = '''
  let g:GtagsCscope_Auto_Load = 1

  let g:GtagsCscope_Auto_Map = 1

  "let g:GtagsCscope_Quiet = 1

  let g:GtagsCscope_Absolute_Path = 1
'''

[[plugins]]
repo = 'vim-scripts/gtags.vim'

[[plugins]]
repo = 'tpope/vim-vinegar'

[[plugins]]
repo = 'mbbill/undotree'
hook_add = '''
  nmap <leader>ut :UndotreeToggle<cr>
'''

[[plugins]]
repo = 'tomtom/tcomment_vim'

[[plugins]]
repo = 'terryma/vim-multiple-cursors'

[[plugins]]
repo = 'tmhedberg/matchit'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tpope/vim-dispatch'

[[plugins]]
repo = 'terryma/vim-expand-region'

[[plugins]]
repo = 'justinmk/vim-sneak'
hook_add = '''
  let g:sneak#streak = 0
'''

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
  let g:indentLine_leadingSpaceEnabled = 1
'''

[[plugins]]
repo = 'vim-scripts/multisearch.vim'
hook_add = '''
  function! s:initMsearch()
    " Add your Msearch initialization commands here ...
    Msearch highlight add ctermbg=blue
    Msearch highlight add ctermbg=yellow
    Msearch highlight add ctermbg=green
    Msearch highlight add ctermbg=cyan
    Msearch highlight add ctermbg=magenta
    Msearch highlight add ctermbg=lightyellow
    Msearch highlight add ctermbg=lightred
    Msearch highlight add ctermbg=lightgreen
    Msearch highlight add ctermbg=lightcyan
    Msearch highlight add ctermbg=lightmagenta
    Msearch highlight add ctermbg=lightgray
    Msearch highlight add ctermbg=brown
    Msearch highlight add ctermbg=darkgreen
    Msearch highlight add ctermbg=darkmagenta
    Msearch highlight add ctermbg=darkred

    map <leader>m/ :Msearch add 
    map <leader>mn :Msearch next<cr>
    map <leader>mN :Msearch previous<cr>
    map <leader>ml :Msearch list<cr>
    map <leader>md :Msearch delete
  endfunction
  autocmd VimEnter * call s:initMsearch()
'''

[[plugins]]
repo = 'google/vim-searchindex'

[[plugins]] # カラースキーマ
repo = 'w0ng/vim-hybrid'
hook_add = '''
  set background=dark
  " colorscheme 設定は source 後に行う必要があるので VimEnter で行う。
  " 但し Colorscheme イベントの発生が抑制されないよう nented を付ける。
  au MyAutoCmd VimEnter * nested colorscheme hybrid
'''

[[plugins]]
repo = 'jiangmiao/auto-pairs'

[[plugins]]
repo = 'scrooloose/nerdtree'

hook_add = '''
  " Toggle NERDTree list plugin
  map <leader>ntt :NERDTreeToggle<cr>
  map <leader>ntf :NERDTreeFind<cr>

  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
'''

[[plugins]]
repo = 'christoomey/vim-tmux-navigator'

[[plugins]]
repo = 'benmills/vimux'
hook_add = '''
  " Prompt for a command to run
  map <Leader>vp :VimuxPromptCommand<CR>

  " Run last command executed by VimuxRunCommand
  map <Leader>vl :VimuxRunLastCommand<CR>

  " Inspect runner pane
  map <Leader>vi :VimuxInspectRunner<CR>

  " Close vim tmux runner opened by VimuxRunCommand
  map <Leader>vq :VimuxCloseRunner<CR>

  " Interrupt any command running in the runner pane
  map <Leader>vx :VimuxInterruptRunner<CR>

  " Zoom the runner pane (use <bind-key> z to restore runner pane)
  map <Leader>vz :call VimuxZoomRunner()<CR>
'''
