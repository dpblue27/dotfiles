# http://qiita.com/delphinus/items/00ff2c0ba972c6e41542
# http://qiita.com/kawaz/items/ee725f6214f91337b42b
# http://qiita.com/delphinus/items/cd221a450fd23506e81a

[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = '~/.linuxbrew/opt/fzf'
hook_add = '''
  let $FZF_DEFAULT_OPTS .= ' --no-height'
'''

[[plugins]]
repo = 'junegunn/fzf.vim'
hook_add = '''
  " Enable per-command history.
  " CTRL-N and CTRL-P will be automatically bound to next-history and
  " previous-history instead of down and up. If you don't like the change,
  " explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
  let g:fzf_history_dir = '~/.local/share/fzf-history'

  " Augmenting Ag command using fzf#vim#with_preview function
  "   * fzf#vim#with_preview([[options], preview window, [toggle keys...]])
  "     * For syntax-highlighting, Ruby and any of the following tools are required:
  "       - Highlight: http://www.andre-simon.de/doku/highlight/en/highlight.php
  "       - CodeRay: http://coderay.rubychan.de/
  "       - Rouge: https://github.com/jneen/rouge
  "
  "   :Ag  - Start fzf with hidden preview window that can be enabled with "?" key
  "   :Ag! - Start fzf in fullscreen and display the preview window above
  command! -bang -nargs=* Ag
    \ call fzf#vim#ag(<q-args>,
    \                 <bang>0 ? fzf#vim#with_preview('up:60%')
    \                         : fzf#vim#with_preview('right:50%:hidden', '?'),
    \                 <bang>0)

  " Likewise, Files command with preview window
  command! -bang -nargs=? -complete=dir Files
  \ call fzf#vim#files(<q-args>,
    \                 <bang>0 ? fzf#vim#with_preview('up:60%')
    \                         : fzf#vim#with_preview('right:50%:hidden', '?'),
    \                 <bang>0)

  function! s:getUserInput(prompt)
    call inputsave()
    let userInput = input(a:prompt)
    call inputrestore()
    return shellescape(userInput)
  endfunction

  function! s:defaultRgOptions()
    return '--column --line-number --no-heading --color=always --smart-case'
  endfunction

  function! s:constructRgCommand()
    return 'rg ' . s:defaultRgOptions() . ' -- ' .  s:getUserInput('Enter search term: ')
  endfunction

  function! s:constructRgWithTypeCommand()
    return 'rg ' . s:defaultRgOptions() . ' --type ' . s:getUserInput('Enter file type: '). ' -- ' .  s:getUserInput('Enter search term: ')
  endfunction

  command! -bang -nargs=* Rg
    \ call fzf#vim#grep(
    \   s:constructRgCommand(), 1,
    \   <bang>0 ? fzf#vim#with_preview('up:60%')
    \           : fzf#vim#with_preview('right:50%:hidden', '?'),
    \   <bang>0)

  command! -bang -nargs=* RgWithType
    \ call fzf#vim#grep(
    \   s:constructRgWithTypeCommand(), 1,
    \   <bang>0 ? fzf#vim#with_preview('up:60%')
    \           : fzf#vim#with_preview('right:50%:hidden', '?'),
    \   <bang>0)

  " Command for git grep
  " - fzf#vim#grep(command, with_column, [options], [fullscreen])
  command! -bang -nargs=* GGrep
    \ call fzf#vim#grep(
    \   'git grep --color --extended-regexp --line-number -- ' . s:getUserInput('Enter search term: '), 0,
    \   { 'dir': systemlist('git rev-parse --show-toplevel')[0] }, <bang>0)

  " Insert mode completion
  imap <c-t> <plug>(fzf-complete-file-ag)

  nmap <space> [fzf]
  nnoremap [fzf] <nop>

  nnoremap <silent> [fzf]f :<C-u>Files<cr><c-u>
  nnoremap <silent> [fzf]gg :<C-u>GGrep<cr><c-u>
  nnoremap <silent> [fzf]gf :<C-u>GFiles<cr><c-u>
  nnoremap <silent> [fzf]gs :<C-u>GFiles?<cr><c-u>
  nnoremap <silent> [fzf]gl :<C-u>Commits<cr><c-u>
  nnoremap <silent> [fzf]gL :<C-u>BCommits<cr><c-u>
  nnoremap <silent> [fzf]b :<C-u>Buffers<cr><c-u>
  nnoremap <silent> [fzf]r :<C-u>Rg<cr><c-u>
  nnoremap <silent> [fzf]R :<C-u>RgWithType<cr><c-u>
  nnoremap <silent> [fzf]l :<C-u>Lines<cr><c-u>
  nnoremap <silent> [fzf]L :<C-u>BLines<cr><c-u>
  nnoremap <silent> [fzf]t :<C-u>Tags<cr><c-u>
  nnoremap <silent> [fzf]T :<C-u>BTags<cr><c-u>
  nnoremap <silent> [fzf]m :<C-u>Marks<cr><c-u>
  nnoremap <silent> [fzf]w :<C-u>Windows<cr><c-u>
  nnoremap <silent> [fzf]h :<C-u>History<cr><c-u>
  nnoremap <silent> [fzf]ch :<C-u>History:<cr><c-u>
  nnoremap <silent> [fzf]sh :<C-u>History/<cr><c-u>
  "nnoremap <silent> [fzf]c :<C-u>Commands<cr><c-u>
  "nnoremap <silent> [fzf]M :<C-u>Maps<cr><c-u>
  nnoremap <silent> [fzf]h :<C-u>Helptags<cr><c-u>
'''

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/neoyank.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
  if dein#util#_is_windows()
    let cmd = 'tools\\update-dll-mingw'
  elseif dein#util#_is_cygwin()
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'ozelentok/denite-gtags'
hook_add = '''
  nnoremap <C-g>a :DeniteCursorWord -buffer-name=gtags_context gtags_context<cr>
  nnoremap <C-g>d :DeniteCursorWord -buffer-name=gtags_def gtags_def<cr>
  nnoremap <C-g>r :DeniteCursorWord -buffer-name=gtags_ref gtags_ref<cr>
  nnoremap <C-g>g :DeniteCursorWord -buffer-name=gtags_grep gtags_grep<cr>
  nnoremap <C-g>t :Denite -buffer-name=gtags_completion gtags_completion<cr>
  nnoremap <C-g>f :Denite -buffer-name=gtags_file gtags_file<cr>
  nnoremap <C-g>p :Denite -buffer-name=gtags_path gtags_path<cr>
'''

[[plugins]]
repo = 'airblade/vim-rooter'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
  let g:deoplete#enable_at_startup = 1
  " Tab to cycle thru matches
  inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"
  inoremap <expr><s-tab> pumvisible() ? "\<c-p>" : "\<s-tab>"

  let g:EclimCompletionMethod = 'omnifunc'
  let g:deoplete#omni#input_patterns = {}
  let g:deoplete#omni#input_patterns.java = '[^. *\t]\.\w*'
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  let g:lightline = {
      \ 'colorscheme': 'PaperColor',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'fugitive', 'filename' ] ]
      \ },
      \ 'component_function': {
      \   'fugitive': 'LightlineFugitive',
      \   'readonly': 'LightlineReadonly',
      \   'modified': 'LightlineModified',
      \   'filename': 'LightlineFilename'
      \ },
      \ 'separator': { 'left': '', 'right': '' },
      \ 'subseparator': { 'left': '', 'right': '' }
    \ }
  function! LightlineModified()
    if &filetype == "help"
      return ""
    elseif &modified
      return "+"
    elseif &modifiable
      return ""
    else
      return ""
    endif
  endfunction

  function! LightlineReadonly()
    if &filetype == "help"
      return ""
    elseif &readonly
      return ""
    else
      return ""
    endif
  endfunction

  function! LightlineFilename()
    return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
          \ ('' != expand('%:t') ? expand('%:t') : '[No Name]') .
          \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
  endfunction

  function! LightlineFugitive()
    if exists("*fugitive#head")
      let branch = fugitive#head()
      return branch !=# '' ? ' '.branch : ''
    endif
    return ''
  endfunction
'''

[[plugins]]
repo = 'edkolev/tmuxline.vim'

[[plugins]]
repo = 'vim-scripts/a.vim')
hook_add = '''
  let g:alternateSearchPath = 'reg:/include/src/g/,reg:/src/include/g/'
  let g:alternateNoDefaultAlternate = 1
'''

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'tpope/vim-obsession'

[[plugins]]
repo = 'vim-scripts/taglist.vim'
hook_add = '''
  " Toggle Tag list plugin
  map <leader>tl :TlistToggle<cr>

  let Tlist_Auto_Open = 0
  let Tlist_Exit_OnlyWindow = 1
  "let Tlist_Show_One_File = 1
  "let Tlist_Display_Prototype = 1
  let Tlist_File_Fold_Auto_Close = 1
  let Tlist_WinWidth = 40
'''

[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = '''
  let g:tagbar_left = 1

  " Toggle Tag list plugin
  map <leader>tb :TagbarToggle<cr>
'''

[[plugins]]
repo = 'vim-scripts/vcscommand.vim'

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
  map <leader>gl :Glog<cr>
  map <leader>gs :Gstatus<cr>
  map <leader>gb :Gblame<cr>
  map <leader>gr :Gread<cr>
  map <leader>gd :Gvdiff<cr>
'''

[[plugins]]
repo = 'honza/vim-snippets'

[[plugins]]
repo = 'SirVer/ultisnips'
hook_add = '''
  " Trigger configuration. Do not use <tab> if you use
  " https://github.com/Valloric/YouCompleteMe.
  let g:UltiSnipsExpandTrigger = "<leader><tab>"
  let g:UltiSnipsJumpForwardTrigger = "<leader><tab>"
  let g:UltiSnipsJumpBackwardTrigger = "<leader><s-tab>"
  let g:UltiSnipsListSnippets = "<leader>sn"
  let g:UltiSnipsSnippetDirectories = ["snips-private", "UltiSnips"]

  " " If you want :UltiSnipsEdit to split your window.
  let g:UltiSnipsEditSplit = "vertical"
'''

[[plugins]]
repo = 'joereynolds/gtags-scope'
hook_add = '''
  let g:GtagsCscope_Auto_Load = 1

  let g:GtagsCscope_Auto_Map = 1

  "let g:GtagsCscope_Quiet = 1

  let g:GtagsCscope_Absolute_Path = 1
'''

[[plugins]]
repo = 'vim-scripts/gtags.vim'

[[plugins]]
repo = 'tpope/vim-vinegar'

[[plugins]]
repo = 'mbbill/undotree'
hook_add = '''
  nmap <leader>ut :UndotreeToggle<cr>
'''

[[plugins]]
repo = 'tomtom/tcomment_vim'

[[plugins]]
repo = 'terryma/vim-multiple-cursors'

[[plugins]]
repo = 'andymass/vim-matchup'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tpope/vim-dispatch'

[[plugins]]
repo = 'terryma/vim-expand-region'

[[plugins]]
repo = 'justinmk/vim-sneak'
hook_add = '''
  let g:sneak#streak = 0
'''

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
  let g:indentLine_leadingSpaceEnabled = 1

  function! YtToggleIndentLineAndLeadingSpace()
    execute 'IndentLinesToggle'
    execute 'LeadingSpaceToggle'
  endfunction
  map <leader>il :call YtToggleIndentLineAndLeadingSpace()<cr>
'''

[[plugins]]
repo = 'vim-scripts/multisearch.vim'
hook_add = '''
  function! s:initMsearch()
    " Add your Msearch initialization commands here ...
    Msearch highlight add ctermbg=blue
    Msearch highlight add ctermbg=yellow
    Msearch highlight add ctermbg=green
    Msearch highlight add ctermbg=cyan
    Msearch highlight add ctermbg=magenta
    Msearch highlight add ctermbg=lightyellow
    Msearch highlight add ctermbg=lightred
    Msearch highlight add ctermbg=lightgreen
    Msearch highlight add ctermbg=lightcyan
    Msearch highlight add ctermbg=lightmagenta
    Msearch highlight add ctermbg=lightgray
    Msearch highlight add ctermbg=brown
    Msearch highlight add ctermbg=darkgreen
    Msearch highlight add ctermbg=darkmagenta
    Msearch highlight add ctermbg=darkred

    map <leader>m/ :Msearch add 
    map <leader>mn :Msearch next<cr>
    map <leader>mN :Msearch previous<cr>
    map <leader>ml :Msearch list<cr>
    map <leader>md :Msearch delete
  endfunction
  autocmd VimEnter * call s:initMsearch()
'''

[[plugins]]
repo = 'google/vim-searchindex'

[[plugins]] # カラースキーマ
repo = 'w0ng/vim-hybrid'
hook_add = '''
  set background=dark
  " colorscheme 設定は source 後に行う必要があるので VimEnter で行う。
  " 但し Colorscheme イベントの発生が抑制されないよう nented を付ける。
  au MyAutoCmd VimEnter * nested colorscheme hybrid
'''

[[plugins]]
repo = 'jiangmiao/auto-pairs'

[[plugins]]
repo = 'scrooloose/nerdtree'

hook_add = '''
  " Toggle NERDTree list plugin
  map <leader>ntt :NERDTreeToggle<cr>
  map <leader>ntf :NERDTreeFind<cr>

  let NERDTreeHijackNetrw=1

  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
'''

[[plugins]]
repo = 'christoomey/vim-tmux-navigator'

[[plugins]]
repo = 'benmills/vimux'
hook_add = '''
  " Prompt for a command to run
  map <Leader>vp :VimuxPromptCommand<CR>

  " Run last command executed by VimuxRunCommand
  map <Leader>vl :VimuxRunLastCommand<CR>

  " Inspect runner pane
  map <Leader>vi :VimuxInspectRunner<CR>

  " Close vim tmux runner opened by VimuxRunCommand
  map <Leader>vq :VimuxCloseRunner<CR>

  " Interrupt any command running in the runner pane
  map <Leader>vx :VimuxInterruptRunner<CR>

  " Zoom the runner pane (use <bind-key> z to restore runner pane)
  map <Leader>vz :call VimuxZoomRunner()<CR>
'''

[[plugins]]
repo = 'motus/pig.vim'

[[plugins]]
repo = 't9md/vim-choosewin'
hook_add = '''
  nmap  <leader>cw <Plug>(choosewin)
  let g:choosewin_overlay_enable = 1
'''

[[plugins]]
repo = 'easymotion/vim-easymotion'

hook_add = '''
  let g:EasyMotion_use_upper = 1
  let g:EasyMotion_keys = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ;'

  map <Leader>e <Plug>(easymotion-prefix)
'''

[[plugins]]
repo = 'haya14busa/incsearch-easymotion.vim'

[[plugins]]
repo = 'haya14busa/incsearch.vim'

hook_add = '''
  " You can use other keymappings like <C-l> instead of <CR> if you want to
  " use these mappings as default search and somtimes want to move cursor with
  " EasyMotion.
  function! s:incsearch_config(...) abort
    return incsearch#util#deepextend(deepcopy({
    \   'modules': [incsearch#config#easymotion#module({'overwin': 1})],
    \   'keymap': {
    \     "\<c-e>": '<Over>(easymotion)'
    \   },
    \   'is_expr': 0
    \ }), get(a:, 1, {}))
  endfunction

  noremap <silent><expr> /  incsearch#go(<SID>incsearch_config())
  noremap <silent><expr> ?  incsearch#go(<SID>incsearch_config({'command': '?'}))
  noremap <silent><expr> g/ incsearch#go(<SID>incsearch_config({'is_stay': 1}))
'''

[[plugins]]
repo = 'haya14busa/incsearch-fuzzy.vim'

hook_add = '''
  " You can use other keymappings like <C-l> instead of <CR> if you want to
  " use these mappings as default search and somtimes want to move cursor with
  " EasyMotion.
  function! s:incsearch_fuzzy_config(...) abort
    return incsearch#util#deepextend(deepcopy({
    \   'converters': [incsearch#config#fuzzy#converter()],
    \   'modules': [incsearch#config#easymotion#module({'overwin': 1})],
    \   'keymap': {
    \     "\<c-e>": '<Over>(easymotion)'
    \   },
    \   'is_expr': 0
    \ }), get(a:, 1, {}))
  endfunction

  noremap <silent><expr> f/  incsearch#go(<SID>incsearch_fuzzy_config())
  noremap <silent><expr> f?  incsearch#go(<SID>incsearch_fuzzy_config({'command': '?'}))
  noremap <silent><expr> fg/ incsearch#go(<SID>incsearch_fuzzy_config({'is_stay': 1}))
'''

[[plugins]]
repo = 'autowitch/hive.vim'

[[plugins]]
repo = 'thiagoalessio/rainbow_levels.vim'
hook_add = '''
  map <leader>r :RainbowLevelsToggle<cr>
'''

[[plugins]]
repo = 'tommcdo/vim-exchange'

[[plugins]]
repo = 'ludovicchabant/vim-gutentags'

[[plugins]]
repo = 'skywind3000/gutentags_plus'
hook_add = '''
  " enable gtags module
  let g:gutentags_modules = ['ctags', 'gtags_cscope']

  " config project root markers
  let g:gutentags_project_root = ['.git', '.svn']

  " generate datebases in my cache directory, prevent gtags files polluting my project
  let g:gutentags_cache_dir = expand('~/.cache/gutentags')

  " forbid gutentags adding gtags databases
  let g:gutentags_auto_add_gtags_cscope = 0

  " Disable default key bindings
  let g:gutentags_plus_nomap = 1

  noremap <silent> <C-g>s :GscopeFind s <C-R><C-W><cr>
  noremap <silent> <C-g>g :GscopeFind g <C-R><C-W><cr>
  noremap <silent> <C-g>c :GscopeFind c <C-R><C-W><cr>
  noremap <silent> <C-g>t :GscopeFind t <C-R><C-W><cr>
  noremap <silent> <C-g>e :GscopeFind e <C-R><C-W><cr>
  noremap <silent> <C-g>f :GscopeFind f <C-R>=expand("<cfile>")<cr><cr>
  noremap <silent> <C-g>i :GscopeFind i <C-R>=expand("<cfile>")<cr><cr>
  noremap <silent> <C-g>d :GscopeFind d <C-R><C-W><cr>
  noremap <silent> <C-g>a :GscopeFind a <C-R><C-W><cr>
'''

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
  map <leader>al :ALEToggle<cr>
'''
